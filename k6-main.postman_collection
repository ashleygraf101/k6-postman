{
	"info": {
		"_postman_id": "5c08e8e0-27a5-4064-b497-f6160dc3d553",
		"name": "k6",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "List of all public crocodiles",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c42b3e9f-b500-4ceb-bb05-c27411e35d40",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"let schema = {\r",
							"    \"type\": \"array\",\r",
							"    \"minItems\": 1,\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"required\": [\r",
							"            \"id\",\r",
							"            \"name\",\r",
							"            \"sex\",\r",
							"            \"date_of_birth\",\r",
							"            \"age\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"id\": {\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"name\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"sex\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"date_of_birth\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"age\": {\r",
							"                \"type\": \"integer\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false\r",
							"    }\r",
							"};\r",
							"pm.test(\"Response matches expected format\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/public/crocodiles/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"crocodiles",
						""
					]
				},
				"description": "List of all public crocodiles"
			},
			"response": [
				{
					"name": "List of all public crocodiles",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/public/crocodiles/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"public",
								"crocodiles",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:24:18 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Vary",
							"value": "Accept"
						},
						{
							"key": "Allow",
							"value": "GET, HEAD, OPTIONS"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Bert\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2010-06-27\",\n        \"age\": 10\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Ed\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"1995-02-27\",\n        \"age\": 25\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Lyle the Crocodile\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"1985-03-03\",\n        \"age\": 35\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Solomon\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"1993-12-25\",\n        \"age\": 26\n    },\n    {\n        \"id\": 5,\n        \"name\": \"The gharial\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2004-06-28\",\n        \"age\": 16\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Sang Buaya\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2006-01-28\",\n        \"age\": 14\n    },\n    {\n        \"id\": 7,\n        \"name\": \"Sobek\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"1854-09-02\",\n        \"age\": 165\n    },\n    {\n        \"id\": 8,\n        \"name\": \"Curious George\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"1981-01-03\",\n        \"age\": 39\n    }\n]"
				}
			]
		},
		{
			"name": "Get a random public crocodile",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "93ab5211-6cd0-43dd-8882-110916d40a7b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bcea7976-9b13-4734-888c-0387783c327b",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"let schema = {\r",
							"    \"maxItems\": 1,\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"required\": [\r",
							"            \"id\",\r",
							"            \"name\",\r",
							"            \"sex\",\r",
							"            \"date_of_birth\",\r",
							"            \"age\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"id\": {\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"name\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"sex\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"date_of_birth\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"age\": {\r",
							"                \"type\": \"integer\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false\r",
							"    }\r",
							"};\r",
							"pm.test(\"Response matches expected format\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{base_url}}/public/crocodiles/{{randomNumber}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"crocodiles",
						"{{randomNumber}}"
					]
				},
				"description": "Select a random public crocodile. The randomNumber variable assumes that the number of crocodiles in the public list is only 7. "
			},
			"response": [
				{
					"name": "Get a random public crocodile",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/public/crocodiles/{{randomNumber}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"public",
								"crocodiles",
								"{{randomNumber}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:24:43 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "68"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept"
						},
						{
							"key": "Allow",
							"value": "GET, HEAD, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 2,\n    \"name\": \"Ed\",\n    \"sex\": \"M\",\n    \"date_of_birth\": \"1995-02-27\",\n    \"age\": 25\n}"
				}
			]
		},
		{
			"name": "Register with valid required Params",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ec7e32a3-0d0e-4673-9bb0-fa16ea093e23",
						"exec": [
							"pm.test(\"Response code is 201 or 202\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"var data = JSON.parse(responseBody);\r",
							"pm.test(\"Non-required fields are empty\", function () {\r",
							"    pm.expect(data.first_name).to.be.empty;\r",
							"    pm.expect(data.last_name).to.be.empty;\r",
							"    pm.expect(data.email).to.be.empty;\r",
							"});\r",
							"\r",
							"let schema = {\r",
							"    \"maxItems\": 1,\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"required\": [\r",
							"            \"username\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"username\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"first_name\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"last_name\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"email\": {\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false\r",
							"    }\r",
							"};\r",
							"pm.test(\"Response matches expected format\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "819903eb-417d-4f22-b15a-34a92e776a18",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "{{$guid}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{$randomUUID}}",
							"type": "text"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/register/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"register",
						""
					]
				},
				"description": "Two fields are required\n- username\n- password\n\nValid input is given for both of these. No other fields are filled out."
			},
			"response": [
				{
					"name": "Register with valid required Params",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{$guid}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{$randomUUID}}",
									"type": "text"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/user/register/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"register",
								""
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:24:56 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "93"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept, Cookie"
						},
						{
							"key": "Allow",
							"value": "POST, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"username\": \"43a133a6-c69f-4485-aa57-58aae9afc80f\",\n    \"first_name\": \"\",\n    \"last_name\": \"\",\n    \"email\": \"\"\n}"
				}
			]
		},
		{
			"name": "Register with all valid Params",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4d2d6c0c-a141-4ee4-af34-a0dee79f49c1",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cd497e2c-1b7d-4da6-99f4-c044fa28ca0e",
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"let schema = {\r",
							"    \"maxItems\": 1,\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"required\": [\r",
							"            \"username\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"username\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"first_name\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"last_name\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"email\": {\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false\r",
							"    }\r",
							"};\r",
							"pm.test(\"Response matches expected format\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "{{$guid}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{$randomUUID}}",
							"type": "text"
						},
						{
							"key": "first_name",
							"value": "{{$randomFirstName}}",
							"type": "text"
						},
						{
							"key": "last_name",
							"value": "{{$randomLastName}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{$randomEmail}}",
							"type": "text"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "https://test-api.k6.io/user/register/",
					"protocol": "https",
					"host": [
						"test-api",
						"k6",
						"io"
					],
					"path": [
						"user",
						"register",
						""
					]
				},
				"description": "All fields are filled with valid input."
			},
			"response": [
				{
					"name": "Register with all valid Params",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{$guid}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{$randomUUID}}",
									"type": "text"
								},
								{
									"key": "first_name",
									"value": "{{$randomFirstName}}",
									"type": "text"
								},
								{
									"key": "last_name",
									"value": "{{$randomLastName}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{$randomEmail}}",
									"type": "text"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "https://test-api.k6.io/user/register/",
							"protocol": "https",
							"host": [
								"test-api",
								"k6",
								"io"
							],
							"path": [
								"user",
								"register",
								""
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:25:08 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "129"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept, Cookie"
						},
						{
							"key": "Allow",
							"value": "POST, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"username\": \"96727d1d-d789-4d4c-b6bb-7f8c32991e0f\",\n    \"first_name\": \"Emelie\",\n    \"last_name\": \"Kling\",\n    \"email\": \"Benny_Langworth@gmail.com\"\n}"
				}
			]
		},
		{
			"name": "Register with no Params",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "763ca2d6-5df6-4cab-a671-e0c648c5a1ea",
						"exec": [
							"pm.test(\"Response code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is 'This field is required'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This field is required.\");\r",
							"});\r",
							"\r",
							"let schema = {\r",
							"    \"maxItems\": 1,\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"required\": [\r",
							"            \"username\",\r",
							"            \"password\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"username\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"password\": {\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false\r",
							"    }\r",
							"};\r",
							"pm.test(\"Response matches expected format\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://test-api.k6.io/user/register/",
					"protocol": "https",
					"host": [
						"test-api",
						"k6",
						"io"
					],
					"path": [
						"user",
						"register",
						""
					]
				},
				"description": "No fields are filled in.\nNegative test - Null content."
			},
			"response": [
				{
					"name": "Register with no Params",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://test-api.k6.io/user/register/",
							"protocol": "https",
							"host": [
								"test-api",
								"k6",
								"io"
							],
							"path": [
								"user",
								"register",
								""
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:18:42 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "79"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept, Cookie"
						},
						{
							"key": "Allow",
							"value": "POST, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"username\": [\n        \"This field is required.\"\n    ],\n    \"password\": [\n        \"This field is required.\"\n    ]\n}"
				}
			]
		},
		{
			"name": "Register with invalid username",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "15a85854-fe86-476a-9693-6e810d9c64a0",
						"exec": [
							"tests[\"Status code is 400\"] = responseCode.code === 400;\r",
							"tests[\"Content-Type header is set\"] = postman.getResponseHeader(\"Content-Type\");\r",
							"\r",
							"pm.test(\"Error message for invalid username shows\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Enter a valid username. This value may contain only letters, numbers, and @/./+/-/_ characters.\");\r",
							"});\r",
							"\r",
							"let schema = {\r",
							"    \"maxItems\": 1,\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"required\": [\r",
							"            \"username\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"username\": {\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false\r",
							"    }\r",
							"};\r",
							"pm.test(\"Response matches expected format\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "$randomInt",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "text"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "https://test-api.k6.io/user/register/",
					"protocol": "https",
					"host": [
						"test-api",
						"k6",
						"io"
					],
					"path": [
						"user",
						"register",
						""
					]
				},
				"description": "Negative test. \n\nThe username is Invalid because it is already used. "
			},
			"response": [
				{
					"name": "Register with invalid username",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "$randomInt",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{testk6Password}}",
									"type": "text"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "https://test-api.k6.io/user/register/",
							"protocol": "https",
							"host": [
								"test-api",
								"k6",
								"io"
							],
							"path": [
								"user",
								"register",
								""
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:21:53 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "112"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept, Cookie"
						},
						{
							"key": "Allow",
							"value": "POST, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"username\": [\n        \"Enter a valid username. This value may contain only letters, numbers, and @/./+/-/_ characters.\"\n    ]\n}"
				}
			]
		},
		{
			"name": "Register with already-used username",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1c6a4768-5e61-4f25-92a4-6ac531c8fb68",
						"exec": [
							"tests[\"Status code is 400\"] = responseCode.code === 400;\r",
							"tests[\"Content-Type header is set\"] = postman.getResponseHeader(\"Content-Type\");\r",
							"\r",
							"pm.test(\"Error message for already-used username shows\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"A user with that username already exists.\");\r",
							"});\r",
							"\r",
							"let schema = {\r",
							"    \"maxItems\": 1,\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"required\": [\r",
							"            \"username\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"username\": {\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false\r",
							"    }\r",
							"};\r",
							"pm.test(\"Response matches expected format\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "text"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "https://test-api.k6.io/user/register/",
					"protocol": "https",
					"host": [
						"test-api",
						"k6",
						"io"
					],
					"path": [
						"user",
						"register",
						""
					]
				},
				"description": "Negative test. \n\nThe username is Invalid because it is already used. "
			},
			"response": [
				{
					"name": "Register with already-used username",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{testk6Username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{testk6Password}}",
									"type": "text"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "https://test-api.k6.io/user/register/",
							"protocol": "https",
							"host": [
								"test-api",
								"k6",
								"io"
							],
							"path": [
								"user",
								"register",
								""
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:19:21 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "58"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept, Cookie"
						},
						{
							"key": "Allow",
							"value": "POST, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"username\": [\n        \"A user with that username already exists.\"\n    ]\n}"
				}
			]
		},
		{
			"name": "Basic auth login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3f092545-0955-43dd-afd8-9826997b7fbc",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"let schema = {\r",
							"    \"maxItems\": 1,\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"required\": [\r",
							"            \"username\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"username\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"first_name\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"last_name\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"email\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"date_joined\": {\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false\r",
							"    }\r",
							"};\r",
							"pm.test(\"Response matches expected format\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "text"
						}
					],
					"options": {
						"urlencoded": {}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/basic/login/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"basic",
						"login",
						""
					]
				},
				"description": "Basic auth login."
			},
			"response": [
				{
					"name": "Basic auth login",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{testk6Username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{testk6Password}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/basic/login/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"basic",
								"login",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:25:31 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "155"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept, Cookie"
						},
						{
							"key": "Allow",
							"value": "POST, OPTIONS"
						},
						{
							"key": "Set-Cookie",
							"value": "sessionid=clrayumd71xb1t2ggp1459bkmeczxu7w; expires=Wed, 02 Sep 2020 10:25:31 GMT; HttpOnly; Max-Age=1209600; Path=/; SameSite=Lax"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 3915,\n    \"username\": \"edcnepvpfnfdoknv\",\n    \"first_name\": \"\",\n    \"last_name\": \"\",\n    \"email\": \"edcnepvpfnfdoknv@hotmail.com\",\n    \"date_joined\": \"2020-07-01T05:11:07.506824Z\"\n}"
				}
			]
		},
		{
			"name": "List of my crocodiles",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6a519efb-576a-4c96-a6b2-fac082eb9d85",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"let schema = {\r",
							"    \"type\": \"array\",\r",
							"    \"minItems\": 1,\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"required\": [\r",
							"            \"id\",\r",
							"            \"name\",\r",
							"            \"sex\",\r",
							"            \"date_of_birth\",\r",
							"            \"age\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"id\": {\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"name\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"sex\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"date_of_birth\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"age\": {\r",
							"                \"type\": \"integer\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false\r",
							"    }\r",
							"};\r",
							"pm.test(\"Response matches expected format\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/my/crocodiles/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"my",
						"crocodiles",
						""
					]
				},
				"description": "List of all the crocodiles I've created."
			},
			"response": [
				{
					"name": "List of my crocodiles",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/my/crocodiles/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"my",
								"crocodiles",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:37:42 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Vary",
							"value": "Accept"
						},
						{
							"key": "Allow",
							"value": "GET, POST, HEAD, OPTIONS"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"id\": 263741,\n        \"name\": \"Miss Lori Hermann\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"1381-01-22\",\n        \"age\": 639\n    },\n    {\n        \"id\": 263762,\n        \"name\": \"Mrs. Aaliyah Rogahn\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-01\",\n        \"age\": 0\n    },\n    {\n        \"id\": 263768,\n        \"name\": \"Ms. Alycia Toy\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-01\",\n        \"age\": 0\n    },\n    {\n        \"id\": 263834,\n        \"name\": \"Mr. Mr. Carmen Durgan\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-01\",\n        \"age\": 0\n    },\n    {\n        \"id\": 264248,\n        \"name\": \"Ms. Jace Balistreri\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2019-01-01\",\n        \"age\": 1\n    },\n    {\n        \"id\": 264254,\n        \"name\": \"Miss Gabe Mann\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-02\",\n        \"age\": 0\n    },\n    {\n        \"id\": 264262,\n        \"name\": \"Ms. Samantha Cummerata\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-02\",\n        \"age\": 0\n    },\n    {\n        \"id\": 264266,\n        \"name\": \"Ms. Benedict Dare\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-03\",\n        \"age\": 0\n    },\n    {\n        \"id\": 264270,\n        \"name\": \"Mrs. Ayla Kling\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2019-01-01\",\n        \"age\": 1\n    },\n    {\n        \"id\": 264275,\n        \"name\": \"Mrs. Lenny Nolan\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-03\",\n        \"age\": 0\n    },\n    {\n        \"id\": 264279,\n        \"name\": \"Miss Rowena Harris\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-03\",\n        \"age\": 0\n    },\n    {\n        \"id\": 264283,\n        \"name\": \"Mr. Yesenia Abshire\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-03\",\n        \"age\": 0\n    },\n    {\n        \"id\": 264284,\n        \"name\": \"Ms. Ben Koepp\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-03\",\n        \"age\": 0\n    },\n    {\n        \"id\": 264286,\n        \"name\": \"Dr. Gillian Johnston\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-03\",\n        \"age\": 0\n    },\n    {\n        \"id\": 264292,\n        \"name\": \"Mrs. Jennifer Brown\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-03\",\n        \"age\": 0\n    },\n    {\n        \"id\": 264293,\n        \"name\": \"Mr. Tristian Streich\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-03\",\n        \"age\": 0\n    },\n    {\n        \"id\": 264300,\n        \"name\": \"Mrs. Macey Kuhlman\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-03\",\n        \"age\": 0\n    },\n    {\n        \"id\": 264301,\n        \"name\": \"Miss Maida Smith\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-03\",\n        \"age\": 0\n    },\n    {\n        \"id\": 264304,\n        \"name\": \"Miss Mrs. Maria Yundt\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-03\",\n        \"age\": 0\n    },\n    {\n        \"id\": 264306,\n        \"name\": \"Miss Westley Rogahn\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2019-01-01\",\n        \"age\": 1\n    },\n    {\n        \"id\": 264316,\n        \"name\": \"Ms. Emmy Cremin\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-03\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317875,\n        \"name\": \"Miss Gilberto Nikolaus\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-22\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317878,\n        \"name\": \"undef\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-22\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317879,\n        \"name\": \"null\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-22\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317881,\n        \"name\": \"(null)\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-22\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317883,\n        \"name\": \"NIL\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-22\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317884,\n        \"name\": \"true\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-22\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317886,\n        \"name\": \"True\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-22\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317887,\n        \"name\": \"Ms. Isabella Weimann\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-22\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317889,\n        \"name\": \"FALSE\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-22\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317896,\n        \"name\": \"nil\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-22\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317900,\n        \"name\": \"True\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-22\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317902,\n        \"name\": \"Dr. Arianna Lebsack\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-22\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317904,\n        \"name\": \"None\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-22\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317905,\n        \"name\": \"hasOwnProperty\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-22\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317906,\n        \"name\": \"\\\\\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-22\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317911,\n        \"name\": \"undefined\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-22\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317913,\n        \"name\": \"Ms. Mr. Daisy Borer\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-22\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317917,\n        \"name\": \"Mrs. Betsy Schimmel\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2019-01-01\",\n        \"age\": 1\n    },\n    {\n        \"id\": 317919,\n        \"name\": \"Miss Icie Purdy\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2019-01-01\",\n        \"age\": 1\n    },\n    {\n        \"id\": 317924,\n        \"name\": \"Ms. Pamela Raynor MD\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2019-01-01\",\n        \"age\": 1\n    },\n    {\n        \"id\": 317926,\n        \"name\": \"<script>alert(\\\\\\\"gotcha!\\\\\\\")</script>\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-23\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317930,\n        \"name\": \"<script>alert(\\\\\\\"gotcha!\\\\\\\")</script>\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-23\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317931,\n        \"name\": \"<script>alert(\\\\\\\"gotcha!\\\\\\\")</script>\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-23\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317942,\n        \"name\": \"Robert Smith Jr.\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-23\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317943,\n        \"name\": \"Rämzilä\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-23\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317944,\n        \"name\": \"Brighde Brùn\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-23\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317946,\n        \"name\": \"Mr. River Wisoky\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2019-01-01\",\n        \"age\": 1\n    },\n    {\n        \"id\": 317947,\n        \"name\": \"??\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-23\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317949,\n        \"name\": \"Prasantha Devenampiyatissa\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-23\",\n        \"age\": 0\n    },\n    {\n        \"id\": 317952,\n        \"name\": \"Dr. Hortense Hudson\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2019-01-01\",\n        \"age\": 1\n    },\n    {\n        \"id\": 321351,\n        \"name\": \"Miss Ms. Felipe Weimann\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-07-27\",\n        \"age\": 0\n    },\n    {\n        \"id\": 321352,\n        \"name\": \"&#8211\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-07-27\",\n        \"age\": 0\n    },\n    {\n        \"id\": 321353,\n        \"name\": \"Ms. Lyla Sipes\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"3000-12-05\",\n        \"age\": -980\n    },\n    {\n        \"id\": 453040,\n        \"name\": \"<script>alert(\\\\\\\"gotcha!\\\\\\\")</script>\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453041,\n        \"name\": \"Miss Lysanne Schultz\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453043,\n        \"name\": \"Mrs. Jayde Frami\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453044,\n        \"name\": \"<script>alert(\\\\\\\"gotcha!\\\\\\\")</script>\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453045,\n        \"name\": \"Mr. Salvatore Conroy\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453046,\n        \"name\": \"Dr. Edgar Barton\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2019-01-01\",\n        \"age\": 1\n    },\n    {\n        \"id\": 453047,\n        \"name\": \"Mr. Sean Paucek\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453048,\n        \"name\": \"Dr. Ollie Walsh\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453049,\n        \"name\": \"Miss Mrs. Bret Herzog\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453051,\n        \"name\": \"Ms. Tiara Hintz\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453052,\n        \"name\": \"<script>alert(\\\\\\\"gotcha!\\\\\\\")</script>\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453054,\n        \"name\": \"<script>alert(\\\\\\\"gotcha!\\\\\\\")</script>\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453055,\n        \"name\": \"Dr. Bulah Will\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453056,\n        \"name\": \"Mrs. Charlene McClure\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453057,\n        \"name\": \"Mr. Kadin Dietrich IV\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453059,\n        \"name\": \"Mrs. Miss Katrina Streich\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453060,\n        \"name\": \"Mrs. Jade Crona V\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2019-01-01\",\n        \"age\": 1\n    },\n    {\n        \"id\": 453061,\n        \"name\": \"Mrs. Ernesto Lowe\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453062,\n        \"name\": \"<script>alert(\\\\\\\"gotcha!\\\\\\\")</script>\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453063,\n        \"name\": \"Mrs. Federico Stroman\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453064,\n        \"name\": \"<script>alert(\\\\\\\"gotcha!\\\\\\\")</script>\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453065,\n        \"name\": \"Miss Randy Kuvalis\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453066,\n        \"name\": \"<script>alert(\\\\\\\"gotcha!\\\\\\\")</script>\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 453067,\n        \"name\": \"Ms. Loraine Lebsack\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 458538,\n        \"name\": \"<script>alert(\\\\\\\"gotcha!\\\\\\\")</script>\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 458589,\n        \"name\": \"Mrs. Cathrine Walter\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 464956,\n        \"name\": \"<script>alert(\\\\\\\"gotcha!\\\\\\\")</script>\",\n        \"sex\": \"M\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    },\n    {\n        \"id\": 464957,\n        \"name\": \"<script>alert(\\\\\\\"gotcha!\\\\\\\")</script>\",\n        \"sex\": \"F\",\n        \"date_of_birth\": \"2020-08-19\",\n        \"age\": 0\n    }\n]"
				}
			]
		},
		{
			"name": "Get list of my crocodiles in invalid Accept format",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c8ec6a96-7a4f-4caf-9c03-d5e6b1644566",
						"exec": [
							"pm.test(\"Status code is 406\", function () {\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Could not satisfy the request Accept header.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/xml",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/my/crocodiles/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"my",
						"crocodiles",
						""
					]
				},
				"description": "List of all the crocodiles I've created."
			},
			"response": [
				{
					"name": "Get List of my crocodiles in invalid Accept format",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/my/crocodiles/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"my",
								"crocodiles",
								""
							]
						}
					},
					"status": "Not Acceptable",
					"code": 406,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:25:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "57"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept"
						},
						{
							"key": "Allow",
							"value": "GET, POST, HEAD, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"detail\": \"Could not satisfy the request Accept header.\"\n}"
				}
			]
		},
		{
			"name": "Token auth login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "154307e4-fc10-48ea-8f5f-c492e167afd3",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"pm.test(\"Response contains access token\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"access\");\r",
							"});\r",
							"let schema = {\r",
							"    \"type\": \"array\",\r",
							"    \"minItems\": 1,\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"required\": [\r",
							"            \"refresh\",\r",
							"            \"access\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"refresh\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"access\": {\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false\r",
							"    }\r",
							"};\r",
							"pm.test(\"Response matches expected format\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{testk6Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "text"
						}
					],
					"options": {
						"urlencoded": {}
					}
				},
				"url": {
					"raw": "https://test-api.k6.io/auth/token/login/",
					"protocol": "https",
					"host": [
						"test-api",
						"k6",
						"io"
					],
					"path": [
						"auth",
						"token",
						"login",
						""
					]
				},
				"description": "JWT login with a valid token. "
			},
			"response": [
				{
					"name": "Token auth login",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{testk6Username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{testk6Password}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "https://test-api.k6.io/auth/token/login/",
							"protocol": "https",
							"host": [
								"test-api",
								"k6",
								"io"
							],
							"path": [
								"auth",
								"token",
								"login",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:23:57 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Vary",
							"value": "Accept"
						},
						{
							"key": "Allow",
							"value": "POST, OPTIONS"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"refresh\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTU5NzkxOTAzNywianRpIjoiZmEyZWY3ZjhiN2RlNGExMjk0ZjYxYzllNjMwYmM3NzYiLCJ1c2VyX2lkIjozOTE1fQ.bNO-jk1vYS2mIgRQxV1OuzjnTXrJiikgJ_HJsDuKde0\",\n    \"access\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTk3ODMyOTM3LCJqdGkiOiJiM2UyNTllMDE2MDU0YWMzYjQ5NzgxOWEwMzA5ZDY3MCIsInVzZXJfaWQiOjM5MTV9.tElXQfeMboNroZxcrhCD-LnblQCiKJ0B-gb_1HrXa1s\"\n}"
				}
			]
		},
		{
			"name": "Create a crocodile with invalid date format",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3c549e04-701d-4917-8f8a-6bb7c1324db8",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ff1025f1-c43e-44ba-940f-d48a1e69ab60",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Date has wrong format. Use one of these formats instead: YYYY-MM-DD.\");\r",
							"});\r",
							"\r",
							"let schema = {\r",
							"    \"minItems\": 1,\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"required\": [\r",
							"            \"date_of_birth\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"date_of_birth\": {\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false\r",
							"    }\r",
							"};\r",
							"pm.test(\"Response matches expected format\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{$randomNamePrefix}} {{$randomFullName}}",
							"type": "text"
						},
						{
							"key": "sex",
							"value": "{{sex}}",
							"type": "text"
						},
						{
							"key": "date_of_birth",
							"value": "17-04-2020",
							"type": "text"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{base_url}}/my/crocodiles/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"my",
						"crocodiles",
						""
					]
				},
				"description": "1. Log in\n2. create a crocodile with Dynamic Variables and variables"
			},
			"response": [
				{
					"name": "Create a crocodile with invalid date format",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{$randomNamePrefix}} {{$randomFullName}}",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "{{sex}}",
									"type": "text"
								},
								{
									"key": "date_of_birth",
									"value": "17-04-2020",
									"type": "text"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/my/crocodiles/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"my",
								"crocodiles",
								""
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:37:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "90"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept"
						},
						{
							"key": "Allow",
							"value": "GET, POST, HEAD, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"date_of_birth\": [\n        \"Date has wrong format. Use one of these formats instead: YYYY-MM-DD.\"\n    ]\n}"
				}
			]
		},
		{
			"name": "Create a crocodile with required value as null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "921f2921-d659-4763-bfbd-3f213620d4ef",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "82ca4214-8f4c-4c51-a24b-b4d49a7de6a3",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This field is required\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{$randomNamePrefix}} {{$randomFullName}}",
							"type": "text"
						},
						{
							"key": "sex",
							"value": "{{sex}}",
							"type": "text"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{base_url}}/my/crocodiles/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"my",
						"crocodiles",
						""
					]
				},
				"description": "1. Log in\n2. create a crocodile with Dynamic Variables and variables"
			},
			"response": [
				{
					"name": "Create a crocodile with required value as null",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{$randomNamePrefix}} {{$randomFullName}}",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "{{sex}}",
									"type": "text"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/my/crocodiles/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"my",
								"crocodiles",
								""
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 11:23:05 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "45"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept"
						},
						{
							"key": "Allow",
							"value": "GET, POST, HEAD, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"date_of_birth\": [\n        \"This field is required.\"\n    ]\n}"
				}
			]
		},
		{
			"name": "Create a crocodile with non-accepted sex",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9318b867-a485-445a-abc3-47dd22c55e1d",
						"exec": [
							"const moment = require('moment');\r",
							"pm.environment.set(\"randomDate\", moment().format(\"YYYY-MM-DD\"));\r",
							"\r",
							"function sex() {\r",
							"    var length = 1,\r",
							"        charset = \"MF\",\r",
							"        retVal = \"\";\r",
							"    for (var i = 0, n = charset.length; i < length; ++i) {\r",
							"        retVal += charset.charAt(Math.floor(Math.random() * n));\r",
							"    }\r",
							"    return retVal;\r",
							"}\r",
							"pm.environment.set(\"sex\", sex());\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "147c1c89-39a1-435b-ae15-c1bb9dd23d36",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.response.to.have.body('{\"sex\":[\"\\\\\"Yeet\\\\\" is not a valid choice.\"]}');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{$randomNamePrefix}} {{$randomFullName}}",
							"type": "text"
						},
						{
							"key": "sex",
							"value": "Yeet",
							"type": "text"
						},
						{
							"key": "date_of_birth",
							"value": "{{randomDate}}",
							"type": "text"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{base_url}}/my/crocodiles/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"my",
						"crocodiles",
						""
					]
				},
				"description": "1. Log in\n2. Create a crocodile with a different sex"
			},
			"response": [
				{
					"name": "Create a crocodile with non-accepted sex",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{$randomNamePrefix}} {{$randomFullName}}",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "Yeet",
									"type": "text"
								},
								{
									"key": "date_of_birth",
									"value": "{{randomDate}}",
									"type": "text"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/my/crocodiles/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"my",
								"crocodiles",
								""
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 11:23:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "43"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept"
						},
						{
							"key": "Allow",
							"value": "GET, POST, HEAD, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"sex\": [\n        \"\\\"Yeet\\\" is not a valid choice.\"\n    ]\n}"
				}
			]
		},
		{
			"name": "Create a crocodile with attempted XXS",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "08bf28d1-9fea-40ac-a0bd-d741e82cafe8",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c4c199f3-2ffc-4d84-a0a9-e99b565344fb",
						"exec": [
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"String is escaped\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('\\\\\"gotcha!\\\\');\r",
							"});\r",
							"\r",
							"let schema = {\r",
							"    \"maxItems\": 1,\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"required\": [\r",
							"            \"id\",\r",
							"            \"name\",\r",
							"            \"sex\",\r",
							"            \"date_of_birth\",\r",
							"            \"age\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"id\": {\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"name\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"sex\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"date_of_birth\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"age\": {\r",
							"                \"type\": \"integer\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false\r",
							"    }\r",
							"};\r",
							"pm.test(\"Response matches expected format\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "<script>alert(\\\"gotcha!\\\")</script>",
							"type": "text"
						},
						{
							"key": "sex",
							"value": "{{sex}}",
							"type": "text"
						},
						{
							"key": "date_of_birth",
							"value": "{{randomDate}}",
							"type": "text"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{base_url}}/my/crocodiles/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"my",
						"crocodiles",
						""
					]
				},
				"description": "This test can only be run alongside the naughty-string.csv file in the collection runner. \n\n1. Log in\n2. Create a crocodile with a naughty-string name"
			},
			"response": [
				{
					"name": "Create a crocodile with attempted XXS",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "<script>alert(\\\"gotcha!\\\")</script>",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "{{sex}}",
									"type": "text"
								},
								{
									"key": "date_of_birth",
									"value": "{{randomDate}}",
									"type": "text"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/my/crocodiles/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"my",
								"crocodiles",
								""
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 11:23:20 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "109"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept"
						},
						{
							"key": "Allow",
							"value": "GET, POST, HEAD, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 464959,\n    \"name\": \"<script>alert(\\\\\\\"gotcha!\\\\\\\")</script>\",\n    \"sex\": \"M\",\n    \"date_of_birth\": \"2020-08-19\",\n    \"age\": 0\n}"
				}
			]
		},
		{
			"name": "Create a crocodile",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "18d8bede-8947-48b1-8cfe-98f774c6b27a",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "005f9503-9653-4253-81e7-a31de62c1550",
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{$randomNamePrefix}} {{$randomFullName}}",
							"type": "text"
						},
						{
							"key": "sex",
							"value": "{{sex}}",
							"type": "text"
						},
						{
							"key": "date_of_birth",
							"value": "{{randomDate}}",
							"type": "text"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{base_url}}/my/crocodiles/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"my",
						"crocodiles",
						""
					]
				},
				"description": "1. Log in\n2. create a crocodile with Dynamic Variables and variables"
			},
			"response": [
				{
					"name": "Create a crocodile",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{$randomNamePrefix}} {{$randomFullName}}",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "{{sex}}",
									"type": "text"
								},
								{
									"key": "date_of_birth",
									"value": "{{randomDate}}",
									"type": "text"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/my/crocodiles/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"my",
								"crocodiles",
								""
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 11:02:01 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "89"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept"
						},
						{
							"key": "Allow",
							"value": "GET, POST, HEAD, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 464958,\n    \"name\": \"Dr. Richard Goodwin\",\n    \"sex\": \"M\",\n    \"date_of_birth\": \"2020-08-19\",\n    \"age\": 0\n}"
				}
			]
		},
		{
			"name": "Create a crocodile with a too-long name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "983c45f7-c8cf-4e5b-a65c-8ca574ad72a4",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "877e45a4-3e87-459d-819e-03a667b22f6d",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body contains error message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Ensure this field has no more than 255 characters.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
							"type": "text"
						},
						{
							"key": "sex",
							"value": "{{sex}}",
							"type": "text"
						},
						{
							"key": "date_of_birth",
							"value": "3000-12-05",
							"type": "text"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{base_url}}/my/crocodiles/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"my",
						"crocodiles",
						""
					]
				},
				"description": "1. Log in\n2. create a crocodile with Dynamic Variables and variables"
			},
			"response": [
				{
					"name": "Create a crocodile with a too-long name",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "{{sex}}",
									"type": "text"
								},
								{
									"key": "date_of_birth",
									"value": "3000-12-05",
									"type": "text"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/my/crocodiles/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"my",
								"crocodiles",
								""
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:38:06 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "63"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept"
						},
						{
							"key": "Allow",
							"value": "GET, POST, HEAD, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"name\": [\n        \"Ensure this field has no more than 255 characters.\"\n    ]\n}"
				}
			]
		},
		{
			"name": "Get a random personal crocodile",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9fbf911a-3e04-4c54-8eea-007d280d6bb5",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "03cdabe9-34fe-47b3-b0b8-27087ef3dd9d",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"var data = JSON.parse(responseBody);\r",
							"pm.test(\"Gender data is valid\", function () {\r",
							"    _.each(pm.response.json(), (sex) => {\r",
							"    pm.expect(data.sex).to.be.oneOf(['F','M']);\r",
							"    })\r",
							"});\r",
							"pm.test(\"Age data is valid\", function () {\r",
							"    _.each(pm.response.json(), (age) => {\r",
							"    pm.expect(data.age).to.be.above(0);\r",
							"    })\r",
							"});\r",
							"\r",
							"let schema = {\r",
							"    \"maxItems\": 1,\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"required\": [\r",
							"            \"id\",\r",
							"            \"name\",\r",
							"            \"sex\",\r",
							"            \"date_of_birth\",\r",
							"            \"age\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"id\": {\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"name\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"sex\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"date_of_birth\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"age\": {\r",
							"                \"type\": \"integer\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false\r",
							"    }\r",
							"};\r",
							"pm.test(\"Response matches expected format\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "{{base_url}}/my/crocodiles/{{randomCrocodileID}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"my",
						"crocodiles",
						"{{randomCrocodileID}}",
						""
					]
				},
				"description": "1. Log in\n2. Get a random crocodile from my list"
			},
			"response": [
				{
					"name": "Get a random personal crocodile",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{base_url}}/my/crocodiles/{{randomCrocodileID}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"my",
								"crocodiles",
								"{{randomCrocodileID}}",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:22:30 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "74"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept"
						},
						{
							"key": "Allow",
							"value": "GET, PUT, PATCH, DELETE, HEAD, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 317900,\n    \"name\": \"True\",\n    \"sex\": \"M\",\n    \"date_of_birth\": \"2020-07-22\",\n    \"age\": 0\n}"
				}
			]
		},
		{
			"name": "Change a random crocodile name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c47cad1f-7589-4c8b-b7ce-2a24b29ff19d",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0c3cbb4c-8146-46fe-be45-4392425ccb08",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "name",
							"value": "{{$randomNamePrefix}} {{$randomFullName}}",
							"type": "text"
						}
					],
					"options": {
						"urlencoded": {}
					}
				},
				"url": {
					"raw": "{{base_url}}/my/crocodiles/{{randomCrocodileID}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"my",
						"crocodiles",
						"{{randomCrocodileID}}",
						""
					]
				},
				"description": "1. Login\n2. PATCH a random crocodile and change their name"
			},
			"response": [
				{
					"name": "Change a random crocodile name",
					"originalRequest": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "{{$randomNamePrefix}} {{$randomFullName}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/my/crocodiles/{{randomCrocodileID}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"my",
								"crocodiles",
								"{{randomCrocodileID}}",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:38:25 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "87"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept"
						},
						{
							"key": "Allow",
							"value": "GET, PUT, PATCH, DELETE, HEAD, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 317887,\n    \"name\": \"Ms. Marvin Dooley\",\n    \"sex\": \"M\",\n    \"date_of_birth\": \"2020-07-22\",\n    \"age\": 0\n}"
				}
			]
		},
		{
			"name": "Delete a random crocodile",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "578760fc-638b-4656-b2ae-d564d197d2bd",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ba85f06a-c564-4614-8f44-46f6b5d0060c",
						"exec": [
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"base_url\") + \"/my/crocodiles/\" + pm.environment.get(\"randomCrocodileID\"),\r",
							"    method: 'GET',\r",
							"    header: {\r",
							"        'content-type': 'application/json',\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({ username: pm.environment.get(\"testk6Username\"), password: pm.environment.get(\"testk6Password\") })\r",
							"    }\r",
							"},  function (err, res) {\r",
							"    if (err) { console.log(err); }\r",
							"    pm.test(\"Crocodile no longer exists\", function () {\r",
							"        pm.expect(err).to.equal(null);\r",
							"        pm.expect(res.code).to.eql(404);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/my/crocodiles/{{randomCrocodileID}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"my",
						"crocodiles",
						"{{randomCrocodileID}}",
						""
					]
				},
				"description": "1. Login\n2. Delete a random crocodile from my list"
			},
			"response": [
				{
					"name": "Delete a random crocodile",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/my/crocodiles/{{randomCrocodileID}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"my",
								"crocodiles",
								"{{randomCrocodileID}}",
								""
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:38:37 GMT"
						},
						{
							"key": "Content-Length",
							"value": "0"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept"
						},
						{
							"key": "Allow",
							"value": "GET, PUT, PATCH, DELETE, HEAD, OPTIONS"
						}
					],
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "Get a private crocodile that is not my crocodile",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4f2e149b-d5c8-45d8-9b38-fae4252de8f4",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c7105a96-48b0-4191-8ce5-09b7e03f1847",
						"exec": [
							"pm.test(\"Status code is 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body('{\"detail\":\"Not found.\"}');\r",
							"});\r",
							"\r",
							"let schema = {\r",
							"    \"maxItems\": 1,\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"required\": [\r",
							"            \"id\",\r",
							"            \"name\",\r",
							"            \"sex\",\r",
							"            \"date_of_birth\",\r",
							"            \"age\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"id\": {\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"name\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"sex\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"date_of_birth\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"age\": {\r",
							"                \"type\": \"integer\"\r",
							"            }\r",
							"        },\r",
							"        \"additionalProperties\": false\r",
							"    }\r",
							"};\r",
							"pm.test(\"Response matches expected format\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/my/crocodiles/{{randomNotCrocodileID}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"my",
						"crocodiles",
						"{{randomNotCrocodileID}}",
						""
					]
				}
			},
			"response": [
				{
					"name": "Get a private crocodile that is not my crocodile",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/my/crocodiles/{{randomNotCrocodileID}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"my",
								"crocodiles",
								"{{randomNotCrocodileID}}",
								""
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 11:01:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "23"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept"
						},
						{
							"key": "Allow",
							"value": "GET, PUT, PATCH, DELETE, HEAD, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"detail\": \"Not found.\"\n}"
				}
			]
		},
		{
			"name": "Delete a private crocodile that is not my crocodile",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2653e3f2-4aa0-40ee-9491-2b1d54818729",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9d179bc0-72fb-4cba-990d-9426c488bb0e",
						"exec": [
							"pm.test(\"Status code is 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body('{\"detail\":\"Not found.\"}');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/my/crocodiles/{{randomNotCrocodileID}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"my",
						"crocodiles",
						"{{randomNotCrocodileID}}",
						""
					]
				}
			},
			"response": [
				{
					"name": "Delete a private crocodile that is not my crocodile",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/my/crocodiles/{{randomNotCrocodileID}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"my",
								"crocodiles",
								"{{randomNotCrocodileID}}",
								""
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:43:48 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "23"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept"
						},
						{
							"key": "Allow",
							"value": "GET, PUT, PATCH, DELETE, HEAD, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"detail\": \"Not found.\"\n}"
				}
			]
		},
		{
			"name": "Change the name of a private crocodile that is not my crocodile",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0fb63a51-bbca-49b4-99e2-eeee690332cc",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "06bdb2ae-61dd-4359-b4da-23d5f19ccd12",
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body('{\"detail\":\"Not found.\"}');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "name",
							"value": "{{$randomNamePrefix}} {{$randomFullName}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/my/crocodiles/{{randomNotCrocodileID}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"my",
						"crocodiles",
						"{{randomNotCrocodileID}}",
						""
					]
				}
			},
			"response": [
				{
					"name": "Edit the name of a private crocodile that is not my crocodile",
					"originalRequest": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "{{$randomNamePrefix}} {{$randomFullName}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/my/crocodiles/{{randomNotCrocodileID}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"my",
								"crocodiles",
								"{{randomNotCrocodileID}}",
								""
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:40:46 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "23"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept, Cookie"
						},
						{
							"key": "Allow",
							"value": "GET, PUT, PATCH, DELETE, HEAD, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"detail\": \"Not found.\"\n}"
				}
			]
		},
		{
			"name": "Change a random private crocodile's characteristics",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e50558b5-1d2f-4073-ad2c-df0844ea9001",
						"exec": [
							"pm.test(\"Response code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3c217092-0689-4d06-ba7c-1328b013f861",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{$randomNamePrefix}} {{$randomFullName}}",
							"type": "text"
						},
						{
							"key": "sex",
							"value": "F",
							"type": "text"
						},
						{
							"key": "date_of_birth",
							"value": "2019-01-01",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/my/crocodiles/{{randomCrocodileID}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"my",
						"crocodiles",
						"{{randomCrocodileID}}",
						""
					]
				}
			},
			"response": [
				{
					"name": "Change a random private crocodile's characteristics",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{$randomNamePrefix}} {{$randomFullName}}",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "F",
									"type": "text"
								},
								{
									"key": "date_of_birth",
									"value": "2019-01-01",
									"type": "text"
								},
								{
									"key": "",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/my/crocodiles/{{randomCrocodileID}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"my",
								"crocodiles",
								"{{randomCrocodileID}}",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:38:54 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "87"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept"
						},
						{
							"key": "Allow",
							"value": "GET, PUT, PATCH, DELETE, HEAD, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 317889,\n    \"name\": \"Dr. Cheyenne Mohr\",\n    \"sex\": \"F\",\n    \"date_of_birth\": \"2019-01-01\",\n    \"age\": 1\n}"
				}
			]
		},
		{
			"name": "Change a random private crocodile's characteristics with required field as null",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f45e489c-ef28-408b-b55b-e62953c42be7",
						"exec": [
							"pm.test(\"Response code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This field is required\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "bf8a0e26-2a5c-4283-ab92-95cb2c22634b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{$randomNamePrefix}} {{$randomFullName}}",
							"type": "text"
						},
						{
							"key": "sex",
							"value": "F",
							"type": "text",
							"disabled": true
						},
						{
							"key": "date_of_birth",
							"value": "2019-01-01",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/my/crocodiles/{{randomCrocodileID}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"my",
						"crocodiles",
						"{{randomCrocodileID}}",
						""
					]
				}
			},
			"response": [
				{
					"name": "Change a random private crocodile's characteristics with required field as null",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{$randomNamePrefix}} {{$randomFullName}}",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "F",
									"type": "text",
									"disabled": true
								},
								{
									"key": "date_of_birth",
									"value": "2019-01-01",
									"type": "text"
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/my/crocodiles/{{randomCrocodileID}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"my",
								"crocodiles",
								"{{randomCrocodileID}}",
								""
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 11:00:58 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "35"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept"
						},
						{
							"key": "Allow",
							"value": "GET, PUT, PATCH, DELETE, HEAD, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"sex\": [\n        \"This field is required.\"\n    ]\n}"
				}
			]
		},
		{
			"name": "Change a random private crocodile's that is not my crocodile's characteristics with required field as null",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e33ed594-cc6d-4e09-a641-7bf75bb0c39c",
						"exec": [
							"pm.test(\"Response code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is correct\", function () {\r",
							"    pm.response.headers.get(\"Content-Type\") == (\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "cf231c39-41ea-49fe-a8bc-8e19ce4278df",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{testk6Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{testk6Username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{$randomNamePrefix}} {{$randomFullName}}",
							"type": "text"
						},
						{
							"key": "sex",
							"value": "F",
							"type": "text",
							"disabled": true
						},
						{
							"key": "date_of_birth",
							"value": "2019-01-01",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/my/crocodiles/{{randomNotCrocodileID}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"my",
						"crocodiles",
						"{{randomNotCrocodileID}}",
						""
					]
				}
			},
			"response": [
				{
					"name": "Change a random private crocodile's that is not my crocodile's characteristics with required field as null",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{$randomNamePrefix}} {{$randomFullName}}",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "F",
									"type": "text",
									"disabled": true
								},
								{
									"key": "date_of_birth",
									"value": "2019-01-01",
									"type": "text"
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/my/crocodiles/{{randomNotCrocodileID}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"my",
								"crocodiles",
								"{{randomNotCrocodileID}}",
								""
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Aug 2020 10:19:04 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "23"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept"
						},
						{
							"key": "Allow",
							"value": "GET, PUT, PATCH, DELETE, HEAD, OPTIONS"
						}
					],
					"cookie": [],
					"body": "{\n    \"detail\": \"Not found.\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "2cc34e79-6553-4533-a6b2-821b38c44beb",
				"type": "text/javascript",
				"exec": [
					"pm.sendRequest({",
					"    url: pm.environment.get(\"base_url\") + '/my/crocodiles',",
					"    method: 'GET',",
					"    header: {",
					"        'content-type': 'application/json',",
					"    },",
					"    body: {",
					"        mode: 'raw',",
					"        raw: JSON.stringify({ username: pm.environment.get(\"testk6Username\"), password: pm.environment.get(\"testk6Password\") })",
					"    }",
					"}, function (err, res) {",
					"    pm.environment.set(\"authorization\", \"Bearer \" + pm.environment.get(\"testk6Token\"));",
					"    let response = res.json();",
					"    crocodile_ids = _.map(response, ({ id }) => ( id )); ",
					"});",
					"var crocodile_ids = pm.environment.get('crocodile_ids');",
					"var crocodile_id_array = [];",
					"for (var i = 0; i < crocodile_ids.length; i++) {",
					"    crocodile_id_array.push(crocodile_ids[i]);",
					"}",
					"var not_my_crocodiles = new Array();",
					"for(var i=0; i<4000; i++)",
					"  if(!crocodile_id_array.includes(i))",
					"    not_my_crocodiles.push(i);",
					"var item = not_my_crocodiles[Math.floor(Math.random() * not_my_crocodiles.length)];",
					"pm.environment.set('randomNotCrocodileID', item);",
					"",
					"pm.sendRequest({",
					"    url: pm.environment.get(\"base_url\") + '/my/crocodiles',",
					"    method: 'GET',",
					"    header: {",
					"        'content-type': 'application/json',",
					"    },",
					"    body: {",
					"        mode: 'raw',",
					"        raw: JSON.stringify({ username: pm.environment.get(\"testk6Username\"), password: pm.environment.get(\"testk6Password\") })",
					"    }",
					"}, function (err, res) {",
					"    pm.environment.set(\"authorization\", \"Bearer \" + pm.environment.get(\"testk6Token\"));",
					"    let response = res.json();",
					"    crocodile_ids = _.map(response, ({ id }) => ( id )); ",
					"    var item = crocodile_ids[Math.floor(Math.random() * crocodile_ids.length)];",
					"    pm.environment.set('randomCrocodileID', item );",
					"});",
					"",
					"pm.environment.set('randomNumber', Math.floor(Math.random() * 7) + 1);",
					"",
					"const moment = require('moment');",
					"pm.environment.set(\"randomDate\", moment().format(\"YYYY-MM-DD\"));",
					"",
					"function sex() {",
					"    var length = 1,",
					"        charset = \"MF\",",
					"        retVal = \"\";",
					"    for (var i = 0, n = charset.length; i < length; ++i) {",
					"        retVal += charset.charAt(Math.floor(Math.random() * n));",
					"    }",
					"    return retVal;",
					"}",
					"pm.environment.set(\"sex\", sex());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b0c1f112-53ca-4561-9852-3ad884e04c1b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}